<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

<#list table.columnList as c>
		<#-- 如果存在自定义java对象 -->
		<#if c.tableName?? && c.tableName!="">
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
		<#break>
		</#if>
</#list>
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import com.tengjie.common.persistence.JoinOnBean;
import com.tengjie.common.persistence.Page;
import com.tengjie.common.persistence.WhereValueBean;
import com.google.common.collect.Lists;

import com.tengjie.common.config.Global;
import com.tengjie.common.persistence.Page;
import com.tengjie.common.utils.DateUtils;
import com.tengjie.common.utils.MyBeanUtils;
import com.tengjie.common.utils.StringUtils;

import com.tengjie.common.web.BaseController;
import com.tengjie.base.common.web.ProjectController;
import com.tengjie.common.persistence.JoinTableBean;
import com.tengjie.common.persistence.ConditionBean;

import java.sql.ResultSet;
<#list importList as im>
${im}
</#list>

import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller<#if isCopy?? && isCopy=="1">_copy</#if> extends ProjectController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	<#list autoWireServiceList as autos>
	${autos?replace("\n","\n    ")!}
  
    </#list>
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String ${primaryKeyName}) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(${primaryKeyName})){
			entity = ${className}Service.get(${primaryKeyName});
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}
	
	
	/**
	 * ${functionNameSimple}列表页面
	 */
	@RequiresPermissions("${permissionPrefix}:list")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		${className}=genDynaQuery(${className},request);
		
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className}); 
		model.addAttribute("page", page);
		model.addAttribute("${className}", ${className});

		return "${lastPackageName}/${viewPrefix}List";
	}
	
	/**
	 * 查看，增加，编辑${functionNameSimple}表单页面
	 */
	@RequiresPermissions(value={"${permissionPrefix}:view","${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model,HttpServletRequest request) {
	    ${className}=genDynaQuery(${className},request);
		
		model.addAttribute("${className}", ${className});
		model.addAttribute("dynamicJspFormConfigVO", dfv);
		
		return "${lastPackageName}/${viewPrefix}Form";
	}

	/**
	 * 保存${functionNameSimple}
	 */
	@RequiresPermissions(value={"${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "save")
	public String save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes,HttpServletRequest request) throws Exception{
		if (!beanValidator(model, ${className})){
			return form(${className}, model,request);
		}
		
		if(!${className}.getIsNewRecord()){//编辑表单保存
			${ClassName} t = ${className}Service.get(${className}.get${primaryKeyName?cap_first}());//从数据库取出记录的值
			t=MyBeanUtils.copyBeanNotNull2Bean(${className}, t);//将编辑表单中的非NULL值覆盖数据库记录中的值
			${className}Service.save(t);//保存
			
		}else{//新增表单保存
			${className}Service.save(${className});//保存
			
		}
		addMessage(redirectAttributes, "保存${functionNameSimple}成功");
		
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}
	
	/**
	 * 删除${functionNameSimple}
	 */
	@RequiresPermissions("${permissionPrefix}:del")
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}, RedirectAttributes redirectAttributes) throws Exception {
		
		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		toDelete(${className},redirectAttributes);
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}
	private boolean toDelete(${ClassName} ${className}, RedirectAttributes redirectAttributes)throws Exception {
		${className}Service.delete(${className});
		return true;
	}
	/**
	 * 批量删除${functionNameSimple}
	 */
	@RequiresPermissions("${permissionPrefix}:del")
	@RequestMapping(value = "deleteAll")
	public String deleteAll(String ids, RedirectAttributes redirectAttributes) throws Exception {
		String idArray[] =ids.split(",");
		for(String ${primaryKeyName} : idArray){
			boolean returnStatus=toDelete(${className}Service.get(${primaryKeyName}),redirectAttributes);
			if(!returnStatus) {
			return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
		}
		}
		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}
	
	/**
	 * 导出excel文件
	 */
	@RequiresPermissions("${permissionPrefix}:export")
    @RequestMapping(value = "export", method=RequestMethod.POST)
    public String exportFile(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
            String fileName = "${functionNameSimple}"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response, -1), ${className});
    		new ExportExcelDynaBeanAndColumn("${functionNameSimple}", ${ClassName}.class).setDataList(page.getList()).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出${functionNameSimple}记录失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
    }

	/**
	 * 导入Excel数据

	 */
	@RequiresPermissions("${permissionPrefix}:import")
    @RequestMapping(value = "import", method=RequestMethod.POST)
    public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcelDynaColumn ei = new ImportExcelDynaColumn(file, 1, 0);
			List<${ClassName}> list = ei.getDataList(${ClassName}.class);
			
			for (${ClassName} ${className} : list){
				try{
					${className}Service.save(${className});
					successNum++;
				}catch(ConstraintViolationException ex){
					failureNum++;
				}catch (Exception ex) {
					failureNum++;
				}
			}
			if (failureNum>0){
				failureMsg.insert(0, "，失败 "+failureNum+" 条${functionNameSimple}记录。");
			}
			addMessage(redirectAttributes, "已成功导入 "+successNum+" 条${functionNameSimple}记录"+failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入${functionNameSimple}失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
    }
	
	/**
	 * 下载导入${functionNameSimple}数据模板
	 */
	@RequiresPermissions("${permissionPrefix}:import")
    @RequestMapping(value = "import/template")
    public String importFileTemplate(HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
            String fileName = "${functionNameSimple}数据导入模板.xlsx";
    		List<${ClassName}> list = Lists.newArrayList(); 
    		new ExportExcel("${functionNameSimple}数据", ${ClassName}.class, 1).setDataList(list).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
    }
	
	
	

}]]>
	</content>
</template>